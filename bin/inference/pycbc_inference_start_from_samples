#!/bin/env python
""" Convert inference file to parallel temperred compatible start format
"""

import argparse
import numpy
import h5py
from numpy.random import choice
from pycbc.inference.io import loadfile

parser = argparse.ArgumentParser()
parser.add_argument('--input-file')
parser.add_argument('--output-file')
parser.add_argument('--ntemps', type=int)
parser.add_argument('--nwalkers', type=int)
args = parser.parse_args()

# populate an emcee start file with
# values chosen from a dynesty file
# each temperature and walker will get a random
# point from the dynesty output

ntemps = args.ntemps
nwalkers = args.nwalkers

f = loadfile(args.input_file)
params = list(f.variable_params) + ['loglikelihood']

params.remove('srcmtotal')
params.remove('q')

params += ['mass1_from_mtotal_q(srcmtotal, q)']
params += ['mass2_from_mtotal_q(srcmtotal, q)']

samples = f.read_samples(params)
nsample = len(samples)

# These are the ids we'll use for the temps / walkers
use = choice(nsample, replace=False, size=ntemps * nwalkers)

o = h5py.File(args.output_file, 'w')
for k in params:
    data = samples[k][use]
    o['samples/' + k] = data.reshape(ntemps, nwalkers, 1)

o.attrs['filetype'] = 'emcee_pt_file'
o.attrs['static_params'] = []
o.attrs['variable_params'] = f.variable_params

o['sampler_info/acceptance_fraction'] = numpy.zeros(nwalkers)
o['sampler_info'].attrs['nchains'] = nwalkers

o.close()
f.close()
