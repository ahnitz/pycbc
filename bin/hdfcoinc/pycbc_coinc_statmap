#!/bin/env  python
"""
The program combines coincident output files generated
by pycbc_coinc_findtrigs to generated a mapping between SNR and FAP, along
with producing the combined foreground and background triggers
"""
import argparse, h5py, logging, itertools, copy, numpy
from scipy.interpolate import interp1d  
from pycbc.events import veto, coinc
import pycbc.version

def choose_bank_statistic(name):
    pass
    
class BankStatistic(object):
    pass
    
class MassBins(BankStatistic):
    pass

class ArrayData(object):
    def __init__(self, data=None, files=None, groups=None):
        if data:
            self.data = data
        elif files:
            self.data = {}
            for g in groups:
                self.data[g] = []
            
            for f in files:
                for g in groups:
                    d = h5py.File(f)
                    if g in d:
                        self.data[g].append(d[g][:])
                    d.close()
                    
            for k in self.data:
                self.data[k] = numpy.concatenate(self.data[k])

        for k in self.data:
            setattr(self, k, self.data[k])

    def select(self, idx):
        data = {}
        for k in self.data:
            data[k] = self.data[k][idx]
        return ArrayData(data)
   
    def remove(self, idx):
        data = {}
        for k in self.data:
            data[k] = numpy.delete(self.data[k], idx)
        return ArrayData(data)
        
def load_coincs(coinc_files):
    columns = ['stat', 'time1', 'time2', 'trigger_id1', 'trigger_id2', 
               'template_id', 'decimation_factor', 'timeslide_id']
    f = h5py.File(coinc_files[0])
    return (ArrayData(files=coinc_files, groups=columns), dict(f.attrs), 
           f['segments/coinc/start'][:], f['segments/coinc/end'][:], f['segments'])
           
def calculate_fan_map(combined_stat, dec):
    """ Return a function to map between false alarm number (FAN) and the
    combined ranking statistic.
    """
    stat_sorting = combined_stat.argsort()    
    combined_stat = combined_stat[stat_sorting]
    fan = dec[stat_sorting][::-1].cumsum()[::-1]    
    return interp1d(combined_stat, fan, fill_value=1, bounds_error=False) 

def sec_to_year(sec):
    return sec / (3.15569e7)

parser = argparse.ArgumentParser()
# General required options
parser.add_argument('--version', action='version', 
         version=pycbc.version.git_verbose_msg)
parser.add_argument('--coinc-files', nargs='+', 
         help='List of coincidence files used to calculate the FAP, FAR, etc.')
parser.add_argument('--verbose', action='count')
parser.add_argument('--cluster-window', type=float, 
         help='Size in seconds to maximize coinc triggers')
parser.add_argument('--veto-window', type=float, 
         help='window around each zerolag trigger to window out')
parser.add_argument('--output-file')
args = parser.parse_args()
pycbc.init_logging(args.verbose)

logging.info("Loading coinc triggers")    
d, attrs, start, end, seg = load_coincs(args.coinc_files)   
logging.info("We have %s triggers" % len(d.stat))

logging.info("Clustering coinc triggers (inclusive of zerolag)")
d = d.select(coinc.cluster_coincs(d.stat, d.time1, d.time2, d.timeslide_id, 
                     attrs['timeslide_interval'], args.cluster_window))

fore_locs = d.timeslide_id == 0
logging.info("%s clustered foreground triggers" % fore_locs.sum())

ft1, ft2 = d.time1[fore_locs], d.time2[fore_locs]
vt = (ft1 + ft2) / 2.0
veto_start, veto_end = vt - args.veto_window, vt + args.veto_window
veto_time = abs(veto.start_end_to_segments(veto_start, veto_end).coalesce())  
v1 = veto.indices_within_times(d.time1, veto_start, veto_end) 
v2 = veto.indices_within_times(d.time2, veto_start, veto_end) 
e = d.remove(v1).remove(v2)
logging.info("Clustering coinc triggers (exclusive of zerolag)")
e = e.select(coinc.cluster_coincs(e.stat, e.time1, e.time2, e.timeslide_id, 
                     attrs['timeslide_interval'], args.cluster_window))

logging.info("Dumping foreground triggers")
f = h5py.File(args.output_file, "w")
f.attrs['detector_1'] = attrs['detector_1']
f.attrs['detector_2'] = attrs['detector_2']
f.attrs['timeslide_interval'] = attrs['timeslide_interval']

# Copy over the segment for coincs and singles
for key in seg.keys():
    f['segments/%s/start' % key] = seg[key]['start'][:]
    f['segments/%s/end' % key] = seg[key]['end'][:]

f['segments/foreground_veto/start'] = veto_start
f['segments/foreground_veto/end'] = veto_end

if fore_locs.sum() > 0:
    for k in d.data:
        f['foreground/' + k] = d.data[k][fore_locs]



back_locs = d.timeslide_id != 0

if (back_locs.sum()) == 0:
    logging.warn("There were no background events, so we could not assign "
                 "any statistic values")
    exit()
    
logging.info("Dumping background triggers (inclusive of zerolag)")
for k in d.data:
    f['background/' + k] = d.data[k][back_locs]
    
logging.info("Dumping background triggers (exclusive of zerolag)")   
for k in e.data:
    f['background_exc/' + k] = e.data[k]

maxtime = max(attrs['foreground_time1'], attrs['foreground_time2'])
mintime = min(attrs['foreground_time1'], attrs['foreground_time2'])

maxtime_exc = maxtime - veto_time
mintime_exc = mintime - veto_time

background_time = int(maxtime / attrs['timeslide_interval']) * mintime
coinc_time = float(attrs['coinc_time'])

background_time_exc = int(maxtime_exc / attrs['timeslide_interval']) * mintime_exc
coinc_time_exc = coinc_time - veto_time

logging.info("Making mapping from FAN to the combined statistic")
back_stat = d.stat[back_locs]
fanmap = calculate_fan_map(back_stat, d.decimation_factor[back_locs])       
back_fan = fanmap(back_stat)

fanmap_exc = calculate_fan_map(e.stat, e.decimation_factor)     
back_fan_exc = fanmap_exc(e.stat)         

f['background/fan'] = back_fan
f['background/ifar'] = sec_to_year(background_time / back_fan)  
f['background_exc/fan'] = back_fan_exc
f['background_exc/ifar'] = sec_to_year(background_time_exc / back_fan_exc)

f.attrs['background_time'] = background_time
f.attrs['foreground_time'] = coinc_time
f.attrs['background_time_exc'] = background_time_exc
f.attrs['foreground_time_exc'] = coinc_time_exc

logging.info("calculating ifar values")
fore_stat = d.stat[fore_locs]

fore_fan = fanmap(fore_stat)
ifar = background_time / fore_fan

fore_fan_exc = fanmap_exc(fore_stat)
ifar_exc = background_time_exc / fore_fan_exc

logging.info("calculating fap values")
fap = numpy.clip(coinc_time/ifar, 0, 1)
fap_exc = numpy.clip(coinc_time_exc/ifar_exc, 0, 1)
if fore_locs.sum() > 0:
    f['foreground/fan'] = fore_fan
    f['foreground/ifar'] = sec_to_year(ifar)
    f['foreground/fap'] = fap
    
    f['foreground/fan_exc'] = fore_fan_exc
    f['foreground/ifar_exc'] = sec_to_year(ifar_exc)
    f['foreground/fap_exc'] = fap_exc

logging.info("Done") 
